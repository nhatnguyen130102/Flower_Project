@using Flower_Repository;
@using Microsoft.Extensions.Caching.Memory;
@model Flower_ViewModels.OrderVM

@{
    ViewData["Title"] = "getInfoView";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
@inject ApplicationDbContext _context;
@inject IMemoryCache _memoryCache;

<div class="w-full mx-auto px-12 py-8">
    <h2 class="mb-12 text-center text-4xl font-bold uppercase">Your Payment</h2>
    <div class="w-full grid grid-cols-1 gap-8 lg:grid-cols-5 lg:gap-12">
        @*<div class="flex-none justify-around space-x-12 space-y-8 lg:flex lg:space-y-0">*@
        <div class="text-start lg:col-span-3">


            <form asp-action="getInfo" class="space-y-8">
                <div asp-validation-summary="ModelOnly" class="text-danger"></div>
                <div class="space-y-4">
                    <h3 class="text-lg font-medium">1. Who do you want to send the gift to?</h3>
                    <input asp-for="Name" type="text" placeholder="Recipient's full name *" class="w-full rounded-sm border px-8 py-2" />
                    <input asp-for="Phone" type="tel" placeholder="Recipient's phone no. *" class="w-full rounded-sm border px-8 py-2" />
                    <input id="City" asp-for="City" type="text" placeholder="City *" class="w-full rounded-sm border px-8 py-2" />
                    <input id="Address" asp-for="Address" type="text" placeholder="Address (street, number, ward, district) *" class="w-full rounded-sm border px-8 py-2" />
                </div>

                <div class="space-y-4">
                    <h3 class="text-lg font-medium">2. Your billing information</h3>
                    <input asp-for="Name_Order" type="text" class="w-full rounded-sm border px-8 py-2" />
                    <input asp-for="Phone_Order" type="tel" class="w-full rounded-sm border px-8 py-2" />
                </div>

                <div class="space-y-4">
                    <h3 class="text-lg font-medium">3. Delivery at</h3>
                    <input asp-for="DeliveredAt" type="date" id="dateInput" min="" onchange="updateMinDate()" class="w-full rounded-sm border px-8 py-2" />
                </div>

                <input type="text" name="Shop" id="myInput" value="Closest Address" class="w-full rounded-sm border px-8 py-2">
                <p id="result" readonly class="w-full rounded-sm border px-8 py-2"></p>
                @*  <p id="closestAddress"></p> *@
                <p onclick="compareAddresses()" class="px-4 py-2 rounded-sm border bg-black text-white w-fit text-center">Process Values</p>

                <div class="my-12 space-y-4">
                    <input type="checkbox" name="" id="accept-term" />
                    <label for="accept-term">By placing this order, I accept the <b>Terms and Conditions</b> of the purchase and the <b>Privacy Policy.</b> </label><br />
                    <p class="italic text-gray-600">On completing your purchase a confirmation page will open with the details of your order.</p>
                </div>
                <button type="submit" class="w-full rounded-sm border bg-black px-4 py-2 text-xl text-white hover:border-black hover:font-medium">
                    Continue
                </button>
            </form>
        </div>
        <!-- summary -->
        <div class="border lg:border-none lg:col-span-2">
            <div class="space-y-6 rounded-sm p-12 pb-16 shadow-lg lg:p-8">
                <h3 class="text-center text-xl"><b>Order Summary</b></h3>
                <hr />
                @foreach (var item in Model.CartDetails)
                {
                    <div>
                        @{
                            var pro = _context.Products.Where(x => x.ID_Product == item.ID_Product).FirstOrDefault();
                            double total = 0.0;
                        }
                        <div class="flex h-auto w-full items-center justify-between space-x-10 text-gray-900 lg:space-x-4">
                            <img src="\@pro.Img_Product" alt="" class="h-40 w-40 rounded-full object-cover lg:h-24 lg:w-24" />
                            <div class="space-y-2 text-right lg:space-y-1">
                                <h4 class="text-lg font-medium">@pro.Name_Product x @item.Product_Quantity</h4>
                                <h5 class="text-xl font-medium">@pro.Price_Product x @item.Product_Quantity</h5>
                            </div>
                        </div>
                        @{
                            total += pro.Price_Product * item.Product_Quantity;
                            ViewBag.Total = total;
                        }
                    </div>
                }
                <hr />
                <div class="flex items-baseline justify-between">
                    <span class="text-xl">Total</span>
                    <h3 class="text-2xl">
                        <span>
                            $ @ViewBag.Total
                        </span>
                    </h3>
                </div>
                <hr />
                @*  <form asp-action="getInfo" class="space-y-8">
                <button type="submit" class="w-full rounded-sm border bg-black px-4 py-2 text-xl text-white hover:border-black hover:font-medium">
                Continue
                </button>
                </form> *@
            </div>
        </div>
    </div>
    <!-- go back -->
    <button class="my-4 text-lg hover:text-blue-500">
        <a href="cart.html" class="flex space-x-4">
            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="h-6 w-6">
                <path stroke-linecap="round" stroke-linejoin="round" d="M9 15L3 9m0 0l6-6M3 9h12a6 6 0 010 12h-3" />
            </svg>
            <span>Go back</span>
        </a>
    </button>
</div>

@*<h1>getInfoView</h1>
<table class="table">
    <thead>
        <tr>
            <th>
                Name Product
            </th>
            <th>
                Product Image
            </th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model.CartDetails)
        {
            <tr>

                @{
                    var pro = _context.Products.Where(x => x.ID_Product == item.ID_Product).FirstOrDefault();
                }
                <td>
                    @pro.Name_Product
                </td>
                <td>
                    <img src="@pro.Img_Product">
                </td>
            </tr>
        }
    </tbody>
</table>*@

<script>
    function updateMinDate() {

        const today = new Date();

        const formmatedDate = today.toISOString().split('T')[0];

        document.getElementById('dateInput').min = formmatedDate;
    }
    updateMinDate();

    const apiKey = '983SYjbBdUBVJ-oZPhXU6e2GSmspX2W_N9mTjY6s6OY'; // Thay thế bằng API key của bạn

    // Danh sách các địa chỉ đã có sẵn
    // const predefinedAddresses = [
    //     '268 Đ Tô Hiến Thành, Phường 15, Quận 10, Thành phố Hồ Chí Minh, Vietnam',
    //     'Đ. TL 08, Thạnh Lộc, Quận 12, Thành phố Hồ Chí Minh 71515, Vietnam',
    //     '11 P. Lê Phụng Hiểu, French Quarter, Hoàn Kiếm, Hà Nội 100000, Vietnam',
    // ];

    const predefinedAddresses = @Html.Raw(Json.Serialize(ViewData["PredefinedAddresses"]));

    function compareAddresses() {

        var a = document.getElementById("Address").value;
        var b = document.getElementById("City").value;

        var combinedValue = a + ", " + b;
        // const inputAddress = document.getElementById('inputAddress').value;

        const inputAddress = combinedValue;
        console.log(inputAddress);

        // Kiểm tra xem người dùng đã nhập địa chỉ hay chưa
        if (!inputAddress) {
            document.getElementById('result').innerHTML = 'Vui lòng nhập địa chỉ.';
            return;
        }

        // Chuyển địa chỉ nhập thành tọa độ sử dụng Here Geocoding API
        geocodeAddress(apiKey, inputAddress)
            .then(inputCoords => {
                if (inputCoords) {
                    // So sánh với tọa độ của các địa chỉ đã có sẵn
                    const results = [];
                    for (const predefinedAddress of predefinedAddresses) {
                        geocodeAddress(apiKey, predefinedAddress)
                            .then(predefinedCoords => {
                                const distance = calculateHaversineDistance(inputCoords, predefinedCoords);
                                results.push({ address: predefinedAddress, distance });
                                if (results.length === predefinedAddresses.length) {
                                    displayResults(results);
                                    displayClosestAddress(results);

                                }
                            })
                            .catch(error => {
                                console.error('Lỗi:', error);
                                document.getElementById('result').innerHTML = 'Có lỗi xảy ra khi so sánh địa chỉ.';
                            });
                    }
                } else {
                    document.getElementById('result').innerHTML = 'Không thể tìm thấy tọa độ cho địa chỉ nhập.';
                }
            })
            .catch(error => {
                console.error('Lỗi:', error);
                document.getElementById('result').innerHTML = 'Có lỗi xảy ra khi tìm tọa độ.';
            });
    }

    function geocodeAddress(apiKey, address) {
        const apiUrl = `https://geocode.search.hereapi.com/v1/geocode?q=${encodeURIComponent(address)}&apiKey=${apiKey}`;

        return fetch(apiUrl)
            .then(response => response.json())
            .then(data => {
                if (data.items && data.items.length > 0) {
                    return data.items[0].position;
                } else {
                    return null;
                }
            });
    }

    function calculateHaversineDistance(coords1, coords2) {
        const R = 6371; // Bán kính trái đất (đơn vị: km)

        const dLat = deg2rad(coords2.lat - coords1.lat);
        const dLon = deg2rad(coords2.lng - coords1.lng);

        const a =
            Math.sin(dLat / 2) * Math.sin(dLat / 2) +
            Math.cos(deg2rad(coords1.lat)) * Math.cos(deg2rad(coords2.lat)) *
            Math.sin(dLon / 2) * Math.sin(dLon / 2);

        const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));

        const distance = R * c; // Khoảng cách (đơn vị: km)

        return distance;
    }

    function deg2rad(deg) {
        return deg * (Math.PI / 180);
    }

    function displayResults(results) {
        // Sắp xếp kết quả theo khoảng cách tăng dần
        results.sort((a, b) => a.distance - b.distance);

        // Hiển thị kết quả
        const resultElement = document.getElementById('result');
        resultElement.innerHTML = '<strong>Kết quả so sánh:</strong><br>';

        results.forEach(result => {
            resultElement.innerHTML += `${result.address}: ${result.distance.toFixed(2)} km<br>`;
        });
    }

    function displayClosestAddress(results) {
        // Lấy địa chỉ gần nhất từ kết quả
        const closestAddress = results[0].address;

        // Hiển thị địa chỉ gần nhất
        // const closestAddressElement = document.getElementById('closestAddress');
        // closestAddressElement.innerHTML = `<strong>Địa chỉ gần nhất:</strong> ${closestAddress}`;

        localStorage.setItem('Location', closestAddress);

        var savedValue = localStorage.getItem('Location');

        document.getElementById('myInput').value = savedValue;

        console.log(closestAddress);

    }
</script>