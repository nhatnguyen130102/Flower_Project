// <auto-generated />
using System;
using Flower_Repository;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FlowerShop_Web.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20231124042335_update_applicationUser")]
    partial class update_applicationUser
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Flower_Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("District")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ID_CustomerType")
                        .HasColumnType("int");

                    b.Property<int?>("ID_Shop")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Spend")
                        .HasColumnType("float");

                    b.Property<string>("Street")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Ward")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ID_CustomerType");

                    b.HasIndex("ID_Shop");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "5e6c873d-f2b0-41ad-b277-4185c669beca",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "42496daf-0530-487f-a36a-4a206834ac99",
                            Email = "user2@hotmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER2@HOTMAIL.COM",
                            NormalizedUserName = "USER2@HOTMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEKwsm1I0bYz4JJMfOR+GeSoEOLffWWs4f09vuwzMR/b0pvW1jZOQhk6emdxGDOhS8w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "feefd2e2-edb7-4ec9-9188-1b75d4e733f9",
                            TwoFactorEnabled = false,
                            UserName = "user2@hotmail.com"
                        },
                        new
                        {
                            Id = "da84006e-21ff-452a-a6a3-d6d915e84a45",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5b56e283-1fbd-4c83-957d-13cfc052e8b2",
                            Email = "user3@hotmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER3@HOTMAIL.COM",
                            NormalizedUserName = "USER3@HOTMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEMmdNfHUrwY5RojGKhcrJrovkBBPxT98CkxImkup5vvbkSELxAs/v/ZEsHGncTgSsQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "901ac421-521b-431e-9e93-e259f21ff32c",
                            TwoFactorEnabled = false,
                            UserName = "user3@hotmail.com"
                        });
                });

            modelBuilder.Entity("Flower_Models.Bill", b =>
                {
                    b.Property<int>("ID_Bill")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID_Bill"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("BillStatus")
                        .HasColumnType("bit");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DeliveredAt")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("DeliveredStatus")
                        .HasColumnType("bit");

                    b.Property<string>("District")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("HandleStatus")
                        .HasColumnType("bit");

                    b.Property<string>("ID_Customer")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ID_Shop")
                        .HasColumnType("int");

                    b.Property<int?>("ID_Voucher")
                        .HasColumnType("int");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name_Order")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone_Order")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Subtotal")
                        .HasColumnType("float");

                    b.Property<double>("Total_Bill")
                        .HasColumnType("float");

                    b.Property<string>("Ward")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID_Bill");

                    b.HasIndex("ID_Customer");

                    b.HasIndex("ID_Shop");

                    b.HasIndex("ID_Voucher");

                    b.ToTable("Bills");
                });

            modelBuilder.Entity("Flower_Models.BillDetails", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("ID_Bill")
                        .HasColumnType("int");

                    b.Property<int>("ID_Product")
                        .HasColumnType("int");

                    b.Property<int>("Product_Quantity")
                        .HasColumnType("int");

                    b.Property<double>("Total")
                        .HasColumnType("float");

                    b.HasKey("ID");

                    b.HasIndex("ID_Bill");

                    b.HasIndex("ID_Product");

                    b.ToTable("BillDetails");
                });

            modelBuilder.Entity("Flower_Models.Cart", b =>
                {
                    b.Property<int>("ID_Cart")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID_Cart"));

                    b.Property<string>("ID_Customer")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ID_Cart");

                    b.HasIndex("ID_Customer");

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("Flower_Models.CartDetails", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("ID_Cart")
                        .HasColumnType("int");

                    b.Property<int?>("ID_Product")
                        .HasColumnType("int");

                    b.Property<int>("Product_Quantity")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("ID_Cart");

                    b.HasIndex("ID_Product");

                    b.ToTable("CartDetails");
                });

            modelBuilder.Entity("Flower_Models.Category", b =>
                {
                    b.Property<int>("ID_Category")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID_Category"));

                    b.Property<string>("Name_Category")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID_Category");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("Flower_Models.CustomerType", b =>
                {
                    b.Property<int>("ID_CustomerType")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID_CustomerType"));

                    b.Property<double>("Discount")
                        .HasColumnType("float");

                    b.Property<int>("MaxSpend")
                        .HasColumnType("int");

                    b.Property<int>("MinSpend")
                        .HasColumnType("int");

                    b.Property<string>("Name_CustomerType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID_CustomerType");

                    b.ToTable("CustomerTypes");
                });

            modelBuilder.Entity("Flower_Models.FavoriteProduct", b =>
                {
                    b.Property<int>("ID_FavoriteProduct")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID_FavoriteProduct"));

                    b.Property<string>("ID_Customer")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ID_FavoriteProduct");

                    b.HasIndex("ID_Customer");

                    b.ToTable("FavoriteProducts");
                });

            modelBuilder.Entity("Flower_Models.FavoriteProductDetails", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("ID_FavoriteProduct")
                        .HasColumnType("int");

                    b.Property<int?>("ID_Product")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("ID_FavoriteProduct");

                    b.HasIndex("ID_Product");

                    b.ToTable("FavoriteProductDetails");
                });

            modelBuilder.Entity("Flower_Models.FlashSale", b =>
                {
                    b.Property<int>("ID_FlashSale")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID_FlashSale"));

                    b.Property<double>("Price_FlashSale")
                        .HasColumnType("float");

                    b.HasKey("ID_FlashSale");

                    b.ToTable("FlashSales");
                });

            modelBuilder.Entity("Flower_Models.Locations", b =>
                {
                    b.Property<int>("ID_Locations")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID_Locations"));

                    b.Property<string>("Name_Locations")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID_Locations");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("Flower_Models.ManagerUserProduct", b =>
                {
                    b.Property<int>("ID_MUP")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID_MUP"));

                    b.Property<string>("ID_Customer")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ID_Product")
                        .HasColumnType("int");

                    b.Property<int>("ViewCount")
                        .HasColumnType("int");

                    b.HasKey("ID_MUP");

                    b.HasIndex("ID_Customer");

                    b.HasIndex("ID_Product");

                    b.ToTable("ManagerUserProducts");
                });

            modelBuilder.Entity("Flower_Models.Material", b =>
                {
                    b.Property<int>("ID_Material")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID_Material"));

                    b.Property<DateTime>("EXP_Material")
                        .HasColumnType("datetime2");

                    b.Property<int>("ID_MaterialType")
                        .HasColumnType("int");

                    b.Property<string>("Img_Material")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ImportAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name_Material")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price_Material")
                        .HasColumnType("float");

                    b.HasKey("ID_Material");

                    b.HasIndex("ID_MaterialType");

                    b.ToTable("Materials");
                });

            modelBuilder.Entity("Flower_Models.MaterialType", b =>
                {
                    b.Property<int>("ID_MaterialType")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID_MaterialType"));

                    b.Property<string>("Name_MaterialType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID_MaterialType");

                    b.ToTable("MaterialTypes");
                });

            modelBuilder.Entity("Flower_Models.MaterialWarehouse", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("ID_Material")
                        .HasColumnType("int");

                    b.Property<int>("ID_Shop")
                        .HasColumnType("int");

                    b.Property<int>("InStock_Quantity")
                        .HasColumnType("int");

                    b.Property<int>("Sold_Quantity")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("ID_Material");

                    b.HasIndex("ID_Shop");

                    b.ToTable("MaterialWarehouses");
                });

            modelBuilder.Entity("Flower_Models.Occasion", b =>
                {
                    b.Property<int>("ID_Occasion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID_Occasion"));

                    b.Property<string>("Name_Occasion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID_Occasion");

                    b.ToTable("Occasions");
                });

            modelBuilder.Entity("Flower_Models.Post", b =>
                {
                    b.Property<int>("ID_Post")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID_Post"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ID_Category")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ViewCount")
                        .HasColumnType("int");

                    b.HasKey("ID_Post");

                    b.HasIndex("ID_Category");

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("Flower_Models.Product", b =>
                {
                    b.Property<int>("ID_Product")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID_Product"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ID_FlashSale")
                        .HasColumnType("int");

                    b.Property<int>("ID_Occasion")
                        .HasColumnType("int");

                    b.Property<int>("ID_ProductType")
                        .HasColumnType("int");

                    b.Property<string>("Img_Product")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name_Product")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price_Product")
                        .HasColumnType("float");

                    b.Property<double?>("Rating")
                        .HasColumnType("float");

                    b.Property<int?>("ViewCount")
                        .HasColumnType("int");

                    b.Property<bool>("isAvailabled")
                        .HasColumnType("bit");

                    b.Property<bool>("isDiscontinued")
                        .HasColumnType("bit");

                    b.Property<string>("size")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID_Product");

                    b.HasIndex("ID_FlashSale");

                    b.HasIndex("ID_Occasion");

                    b.HasIndex("ID_ProductType");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("Flower_Models.ProductType", b =>
                {
                    b.Property<int>("ID_ProductType")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID_ProductType"));

                    b.Property<string>("Name_ProductType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID_ProductType");

                    b.ToTable("ProductTypes");
                });

            modelBuilder.Entity("Flower_Models.ProductWarehouse", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("ID_Product")
                        .HasColumnType("int");

                    b.Property<int>("ID_Shop")
                        .HasColumnType("int");

                    b.Property<int>("InStock_Quantity")
                        .HasColumnType("int");

                    b.Property<int>("Sold_Quantity")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("ID_Product");

                    b.HasIndex("ID_Shop");

                    b.ToTable("ProductWarehouses");
                });

            modelBuilder.Entity("Flower_Models.Recipe", b =>
                {
                    b.Property<int>("ID_Recipe")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID_Recipe"));

                    b.Property<int>("ID_Material")
                        .HasColumnType("int");

                    b.Property<int>("ID_Product")
                        .HasColumnType("int");

                    b.Property<int>("Material_Quantity")
                        .HasColumnType("int");

                    b.HasKey("ID_Recipe");

                    b.HasIndex("ID_Material");

                    b.HasIndex("ID_Product");

                    b.ToTable("Recipes");
                });

            modelBuilder.Entity("Flower_Models.Shop", b =>
                {
                    b.Property<int>("ID_Shop")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID_Shop"));

                    b.Property<string>("Address_Shop")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ID_Locations")
                        .HasColumnType("int");

                    b.Property<string>("Name_Shop")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone_Shop")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID_Shop");

                    b.HasIndex("ID_Locations");

                    b.ToTable("Shops");
                });

            modelBuilder.Entity("Flower_Models.StockReceivedDocket", b =>
                {
                    b.Property<int>("ID_StockReceivedDocket")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID_StockReceivedDocket"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("ID_Shop")
                        .HasColumnType("int");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("Received")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ReceivedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("ID_StockReceivedDocket");

                    b.HasIndex("ID_Shop");

                    b.ToTable("StockReceivedDockets");
                });

            modelBuilder.Entity("Flower_Models.StockReceivedDocketDetails", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("ID_Material")
                        .HasColumnType("int");

                    b.Property<int>("ID_StockReceivedDocket")
                        .HasColumnType("int");

                    b.Property<int>("StockReceived_Quantity")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("ID_Material");

                    b.HasIndex("ID_StockReceivedDocket");

                    b.ToTable("StockReceivedDocketDetails");
                });

            modelBuilder.Entity("Flower_Models.Voucher", b =>
                {
                    b.Property<int>("ID_Voucher")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID_Voucher"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Discount")
                        .HasColumnType("float");

                    b.Property<DateTime>("EndedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<double>("MinimumAmount")
                        .HasColumnType("float");

                    b.Property<DateTime>("StartedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Voucher_Quantity")
                        .HasColumnType("int");

                    b.HasKey("ID_Voucher");

                    b.ToTable("Vouchers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "c2323ada-6784-4f60-b82e-19a42a191607",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "d13cba36-b87b-4973-bd39-f957dae44fd9",
                            Name = "Manager",
                            NormalizedName = "MANAGER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "5e6c873d-f2b0-41ad-b277-4185c669beca",
                            RoleId = "d13cba36-b87b-4973-bd39-f957dae44fd9"
                        },
                        new
                        {
                            UserId = "da84006e-21ff-452a-a6a3-d6d915e84a45",
                            RoleId = "c2323ada-6784-4f60-b82e-19a42a191607"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Flower_Models.ApplicationUser", b =>
                {
                    b.HasOne("Flower_Models.CustomerType", "CustomerType")
                        .WithMany("ApplicationUser")
                        .HasForeignKey("ID_CustomerType");

                    b.HasOne("Flower_Models.Shop", "Shop")
                        .WithMany()
                        .HasForeignKey("ID_Shop");

                    b.Navigation("CustomerType");

                    b.Navigation("Shop");
                });

            modelBuilder.Entity("Flower_Models.Bill", b =>
                {
                    b.HasOne("Flower_Models.ApplicationUser", "ApplicationUser")
                        .WithMany("Bills")
                        .HasForeignKey("ID_Customer");

                    b.HasOne("Flower_Models.Shop", "Shop")
                        .WithMany()
                        .HasForeignKey("ID_Shop")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Flower_Models.Voucher", "Voucher")
                        .WithMany("Bills")
                        .HasForeignKey("ID_Voucher");

                    b.Navigation("ApplicationUser");

                    b.Navigation("Shop");

                    b.Navigation("Voucher");
                });

            modelBuilder.Entity("Flower_Models.BillDetails", b =>
                {
                    b.HasOne("Flower_Models.Bill", "Bill")
                        .WithMany("BillDetails")
                        .HasForeignKey("ID_Bill")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Flower_Models.Product", "Product")
                        .WithMany("BillDetails")
                        .HasForeignKey("ID_Product")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bill");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Flower_Models.Cart", b =>
                {
                    b.HasOne("Flower_Models.ApplicationUser", "ApplicationUser")
                        .WithMany("Carts")
                        .HasForeignKey("ID_Customer");

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("Flower_Models.CartDetails", b =>
                {
                    b.HasOne("Flower_Models.Cart", "Cart")
                        .WithMany("CartDetails")
                        .HasForeignKey("ID_Cart")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Flower_Models.Product", "Product")
                        .WithMany("CartDetails")
                        .HasForeignKey("ID_Product");

                    b.Navigation("Cart");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Flower_Models.FavoriteProduct", b =>
                {
                    b.HasOne("Flower_Models.ApplicationUser", "ApplicationUser")
                        .WithMany("FavoriteProducts")
                        .HasForeignKey("ID_Customer");

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("Flower_Models.FavoriteProductDetails", b =>
                {
                    b.HasOne("Flower_Models.FavoriteProduct", "FavoriteProducts")
                        .WithMany("FavoriteProductDetails")
                        .HasForeignKey("ID_FavoriteProduct")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Flower_Models.Product", "Product")
                        .WithMany("FavoriteProductDetails")
                        .HasForeignKey("ID_Product");

                    b.Navigation("FavoriteProducts");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Flower_Models.ManagerUserProduct", b =>
                {
                    b.HasOne("Flower_Models.ApplicationUser", "ApplicationUser")
                        .WithMany("ManagerUserProduct")
                        .HasForeignKey("ID_Customer")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Flower_Models.Product", "Product")
                        .WithMany("ManagerUsers")
                        .HasForeignKey("ID_Product")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Flower_Models.Material", b =>
                {
                    b.HasOne("Flower_Models.MaterialType", "MaterialType")
                        .WithMany("Materials")
                        .HasForeignKey("ID_MaterialType")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MaterialType");
                });

            modelBuilder.Entity("Flower_Models.MaterialWarehouse", b =>
                {
                    b.HasOne("Flower_Models.Material", "Material")
                        .WithMany("Warehouse_Warehouse")
                        .HasForeignKey("ID_Material")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Flower_Models.Shop", "Shop")
                        .WithMany("MaterialWarehouses")
                        .HasForeignKey("ID_Shop")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Material");

                    b.Navigation("Shop");
                });

            modelBuilder.Entity("Flower_Models.Post", b =>
                {
                    b.HasOne("Flower_Models.Category", "Category")
                        .WithMany("Posts")
                        .HasForeignKey("ID_Category")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Flower_Models.Product", b =>
                {
                    b.HasOne("Flower_Models.FlashSale", "FlashSale")
                        .WithMany("Products")
                        .HasForeignKey("ID_FlashSale");

                    b.HasOne("Flower_Models.Occasion", "Occasion")
                        .WithMany("Products")
                        .HasForeignKey("ID_Occasion")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Flower_Models.ProductType", "ProductType")
                        .WithMany("Products")
                        .HasForeignKey("ID_ProductType")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FlashSale");

                    b.Navigation("Occasion");

                    b.Navigation("ProductType");
                });

            modelBuilder.Entity("Flower_Models.ProductWarehouse", b =>
                {
                    b.HasOne("Flower_Models.Product", "Product")
                        .WithMany("ProductWarehouses")
                        .HasForeignKey("ID_Product")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Flower_Models.Shop", "Shop")
                        .WithMany("ProductWarehouses")
                        .HasForeignKey("ID_Shop")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Shop");
                });

            modelBuilder.Entity("Flower_Models.Recipe", b =>
                {
                    b.HasOne("Flower_Models.Material", "Material")
                        .WithMany("Recipes")
                        .HasForeignKey("ID_Material")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Flower_Models.Product", "Product")
                        .WithMany("Recipes")
                        .HasForeignKey("ID_Product")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Material");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Flower_Models.Shop", b =>
                {
                    b.HasOne("Flower_Models.Locations", "Locations")
                        .WithMany("Shops")
                        .HasForeignKey("ID_Locations")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Locations");
                });

            modelBuilder.Entity("Flower_Models.StockReceivedDocket", b =>
                {
                    b.HasOne("Flower_Models.Shop", "Shop")
                        .WithMany("StockReceivedDockets")
                        .HasForeignKey("ID_Shop")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Shop");
                });

            modelBuilder.Entity("Flower_Models.StockReceivedDocketDetails", b =>
                {
                    b.HasOne("Flower_Models.Material", "Material")
                        .WithMany("StockReceivedDocketDetails")
                        .HasForeignKey("ID_Material")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Flower_Models.StockReceivedDocket", "StockReceivedDocket")
                        .WithMany("stockReceivedDocketDetails")
                        .HasForeignKey("ID_StockReceivedDocket")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Material");

                    b.Navigation("StockReceivedDocket");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Flower_Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Flower_Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Flower_Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Flower_Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Flower_Models.ApplicationUser", b =>
                {
                    b.Navigation("Bills");

                    b.Navigation("Carts");

                    b.Navigation("FavoriteProducts");

                    b.Navigation("ManagerUserProduct");
                });

            modelBuilder.Entity("Flower_Models.Bill", b =>
                {
                    b.Navigation("BillDetails");
                });

            modelBuilder.Entity("Flower_Models.Cart", b =>
                {
                    b.Navigation("CartDetails");
                });

            modelBuilder.Entity("Flower_Models.Category", b =>
                {
                    b.Navigation("Posts");
                });

            modelBuilder.Entity("Flower_Models.CustomerType", b =>
                {
                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("Flower_Models.FavoriteProduct", b =>
                {
                    b.Navigation("FavoriteProductDetails");
                });

            modelBuilder.Entity("Flower_Models.FlashSale", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Flower_Models.Locations", b =>
                {
                    b.Navigation("Shops");
                });

            modelBuilder.Entity("Flower_Models.Material", b =>
                {
                    b.Navigation("Recipes");

                    b.Navigation("StockReceivedDocketDetails");

                    b.Navigation("Warehouse_Warehouse");
                });

            modelBuilder.Entity("Flower_Models.MaterialType", b =>
                {
                    b.Navigation("Materials");
                });

            modelBuilder.Entity("Flower_Models.Occasion", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Flower_Models.Product", b =>
                {
                    b.Navigation("BillDetails");

                    b.Navigation("CartDetails");

                    b.Navigation("FavoriteProductDetails");

                    b.Navigation("ManagerUsers");

                    b.Navigation("ProductWarehouses");

                    b.Navigation("Recipes");
                });

            modelBuilder.Entity("Flower_Models.ProductType", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Flower_Models.Shop", b =>
                {
                    b.Navigation("MaterialWarehouses");

                    b.Navigation("ProductWarehouses");

                    b.Navigation("StockReceivedDockets");
                });

            modelBuilder.Entity("Flower_Models.StockReceivedDocket", b =>
                {
                    b.Navigation("stockReceivedDocketDetails");
                });

            modelBuilder.Entity("Flower_Models.Voucher", b =>
                {
                    b.Navigation("Bills");
                });
#pragma warning restore 612, 618
        }
    }
}
